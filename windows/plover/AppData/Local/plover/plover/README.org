#+TITLE: A Coder's Plover Dictionary
#+PROPERTY: header-args :tangle user.json

* about this config
I am a heavy user of emacs, vim, and the linux command line. When it comes to coding, the main challenge I have experienced with Plover is the automatic spacing and capitalization. While automatic spacing and capitalization is a big part of what makes stenography so efficient when typing natural language, it can wreak havoc in other contexts. For example, the unexpected insertion of spaces can interfere with the composition of normal mode commands in vim (e.g. "d3j" to delete the current line and the 3 lines below it). For this reason, I have overridden the default fingerspelling behavior to always attach the new letter/number to the end of the current word.

Another challenge is that there is no auto-repeat when holding down keys on a steno machine. This prevents you from holding down "j" and "k" to scroll up and down in vim, for example. You might be surprised how often you use this functionality, even if you are a seasoned vimmer. While I'm still working on it, I'm attempting to overcome this issue by using a combination of =relativenumber= and numeric arguments before j/k.
* start dictionary
#+BEGIN_SRC js
{
#+END_SRC
* shared python code
#+NAME: fingerspelling
#+BEGIN_SRC python :tangle no :results output silent
# fingerspelling chords for the left hand
l = {}
l['a'] = "A"
l['b'] = "PW"
l['c'] = "KR"
l['d'] = "TK"
l['f'] = "TP"
l['g'] = "TKPW"
l['h'] = "H"
l['j'] = "SKWR"
l['k'] = "K"
l['l'] = "HR"
l['m'] = "PH"
l['n'] = "TPH"
l['o'] = "O"
l['p'] = "P"
l['q'] = "KW"
l['r'] = "R"
l['s'] = "S"
l['t'] = "T"
l['v'] = "SR"
l['w'] = "W"
l['x'] = "KP"
l['y'] = "KWR"
l['z'] = "STKPW"

# fingerspelling chords for the right hand
r = {}
r['b'] = "PB"
r['c'] = "RG"
r['d'] = "LG"
r['e'] = "E"
r['f'] = "PL"
r['g'] = "PBLG"
r['h'] = "F"
r['i'] = "EU"
r['j'] = "RBGS"
r['k'] = "G"
r['l'] = "FR"
r['m'] = "FP"
r['n'] = "FPL"
r['p'] = "P"
r['q'] = "BG"
r['r'] = "R"
r['s'] = "S"
r['t'] = "L"
r['u'] = "U"
r['v'] = "RS"
r['w'] = "B"
r['x'] = "PG"
r['y'] = "RBG"
r['z'] = "PBLGS"
#+END_SRC

* bioinformatics
#+BEGIN_SRC js
"PW-EUS": "abyss",
"PW*EUS": "ABySS",
"ARBGS": "arcs",
"A*RBGS": "arks",
"PWRO-EUPB": "Bruijn",
"PW-LT": "btl",
"PW*LT": "BTL",
"KOPB/TEUG": "contig",
"KOPB/TEUGS": "contigs",
"TKPW-PBLG": "de Bruijn graph",
"TKPW*PBLG": "dbg",
"TKPW-G": "de Bruijn graph",
"TKPW*G": "dbg",
"TKEUFT": "dist",
"EPL": "emc",
"HRAO-UPL/TPHA": "Illumina",
"EUL/HRAO-UPL/TPHA": "Illumina",
"KPH-ER": "k-mer",
"KPH-ERS": "k-mers",
"KPH*ER": "kmer",
"KPH*ERS": "kmers",
"K-ERBGT": "konnector",
"K*ERBGT": "Konnector",
"PH-EUP": "mpi",
"PH*EUP": "MPI",
"PRAG": "pragma",
"KWAFT": "quast",
"KWAUFT": "quast",
"SAO*EBG": "seq",
"SEUT/KA": "Sitka",
"TEUG/PHEUPBT": "Tigmint",
"AOUPB/TEUG": "unitig",
"AOUPB/TEUGS": "unitigs",
#+END_SRC
* brackets
#+BEGIN_SRC js
"HR-RPB": "{^}({^}",
"PW-RPB": "{^}[{^}",
"TK-RPB": "{^}\\{{^}",
"S-RPB":  "{^}<",
"S-RPBS":  "<<",
"PWR-FR": "{^})",
"PWR-PB": "{^}]",
"PWR-LG": "{^}\\}",
"PWR-TS": "{^}>",
"PWR-S": "{^}>",
#+END_SRC
* coding
** C/C++ keywords
#+BEGIN_SRC js
"KHR-PBS": "{^}::{^}",
"KRER": "cerr",
"KROUT": "cout",
"KOPBTS": "const",
"ST-D": "std{^}",
"STRUBGT": "struct",
"TAOEUP/TKEF": "typedef",
"TAOEUP/TPHAEUPL": "typename",
#+END_SRC
** expressions/assignment

#+BEGIN_SRC js
"KWA*L": "{MODE:RESET}{^=^}{MODE:LOWER}{MODE:SET_SPACE:}",
"KWA*LS": "{MODE:RESET}{^ = ^}{MODE:LOWER}{MODE:SET_SPACE:}",
"KW*LT": "{MODE:RESET}{^ == ^}{MODE:LOWER}{MODE:SET_SPACE:}",
"TPH*E": "{MODE:RESET}{^ != ^}{MODE:LOWER}{MODE:SET_SPACE:}",
"K*PL": "{MODE:RESET}{^, ^}{MODE:LOWER}{MODE:SET_SPACE:}",
"KR*PL": "{MODE:RESET}{^, ^}{MODE:LOWER}{MODE:SET_SPACE:}",
"HR*T": "{MODE:RESET}{^ < ^}{MODE:LOWER}{MODE:SET_SPACE:}",
"HR*ET": "{MODE:RESET}{^ <= ^}{MODE:LOWER}{MODE:SET_SPACE:}",
"TKPW*T": "{MODE:RESET}{^ > ^}{MODE:LOWER}{MODE:SET_SPACE:}",
"TKPW*ET": "{MODE:RESET}{^ >= ^}{MODE:LOWER}{MODE:SET_SPACE:}",
"HR*PBD": "{MODE:RESET}{^ && ^}{MODE:LOWER}{MODE:SET_SPACE:}",
"HRO*R": "{MODE:RESET}{^ || ^}{MODE:LOWER}{MODE:SET_SPACE:}",
#+END_SRC
* command-line
** shell commands
#+BEGIN_SRC js
"POEUP": "{MODE:RESET}{MODE:LOWER}../{^}",
"POEU": "{MODE:RESET}{MODE:LOWER}./{^}",
"OEUP": "{MODE:RESET}{MODE:LOWER}./{^}",
"TKR-": "cd{MODE:RESET}{MODE:LOWER}",
"KR-D": "cd{MODE:RESET}{MODE:LOWER}",
"KR-PL": "chmod{MODE:RESET}{MODE:LOWER}",
"KHR-PL": "chmod{MODE:RESET}{MODE:LOWER}",
"KR-PLD": "chmod{MODE:RESET}{MODE:LOWER}",
"KHR-PLD": "chmod{MODE:RESET}{MODE:LOWER}",
"KR-P": "cp{MODE:RESET}{MODE:LOWER}",
"SKWRAO-ER/RA": "jira",
"SKWRAO*ER/RA": "JIRA",
"SKWRA*EUFPB": "json",
"HR-S": "ls{MODE:RESET}{MODE:LOWER}",
"HR-PB": "ln{MODE:RESET}{MODE:LOWER}",
"PH-D": "mkdir{MODE:RESET}{MODE:LOWER}",
"PH-F": "mv{MODE:RESET}{MODE:LOWER}",
"O*RG": "org",
"PW-D": "pwd{MODE:RESET}{MODE:LOWER}",
"R-PL": "rm{MODE:RESET}{MODE:LOWER}",
"R-D": "rmdir{MODE:RESET}{MODE:LOWER}",
"SH": "ssh{MODE:RESET}{MODE:LOWER}",
"TPHUBGS": "tmux{MODE:RESET}{MODE:LOWER}",
"KPARGS": "xargs{MODE:RESET}{MODE:LOWER}",
"PAO*EUP": "{MODE:RESET}{MODE:LOWER}{^ | ^}",
#+END_SRC
** command-line switches
#+BEGIN_SRC js
"TK-RB": "{MODE:RESET}{MODE:LOWER}--{^}",
#+END_SRC

#+NAME: command-line-switches
#+BEGIN_SRC python :noweb yes :tangle no :results output silent

<<fingerspelling>>

for char, chord in l.iteritems():
        lower = "{MODE:LOWER}"
        reset = "{MODE:RESET}"
        print('"{}-{}": "{}-{}{}",'.format(chord, "RBG", reset, char, lower))
        print('"{}-{}": "{}-{}{}",'.format(chord, "RPBG", reset, char.upper(), lower))
#+END_SRC

#+BEGIN_SRC js :noweb tangle
<<command-line-switches()>>
#+END_SRC
* emojis
#+BEGIN_SRC js
"AO-E/PHO-EPBLG": "emoji",
"SPHAO*EUL": ":-)",
#+END_SRC
* function keys
To type a function key (e.g. F1), hold down -PL and fingerspell the number with the left hand. The mnemonic for -PL is that it is the mirror image for fingerspelling "F" with the left hand.
#+BEGIN_SRC js
"178": "{#F1}",
"278": "{#F2}",
"378": "{#F3}",
"478": "{#F4}",
"578": "{#F5}",
"678": "{#F6}",
"778": "{#F7}",
"878": "{#F8}",
"978": "{#F9}",
"1078": "{#F10}",
"1278": "{#F12}",
#+END_SRC
* modifier keys (alt/control/shift/win)
** alt
#+BEGIN_SRC js
"KHR*FPB": "{#alt(shift(colon))}",
"P*FP": "{#alt(period)}",
"S*FP": "{#alt(space)}",
"SH*P": "{#alt(space)}",
"HO*EU": "{#alt(slash)}",
"O*EUF": "{#alt(slash)}",
"T*FB": "{#alt(tab)}",
"TH*B": "{#alt(tab)}",
"A*F": "{#alt(a)}",
"PW*F": "{#alt(b)}",
"KR*F": "{#alt(c)}",
"TK*F": "{#alt(d)}",
"*EF": "{#alt(e)}",
"H*E": "{#alt(e)}",
"TP*F": "{#alt(f)}",
"TKPW*F": "{#alt(g)}",
"H*F": "{#alt(h)}",
"*EUF": "{#alt(i)}",
"H*EU": "{#alt(i)}",
"SKWR*F": "{#alt(j)}",
"K*F": "{#alt(k)}",
"HR*F": "{#alt(l)}",
"PH*F": "{#alt(m)}",
"TPH*F": "{#alt(n)}",
"O*F": "{#alt(o)}",
"P*F": "{#alt(p)}",
"KW*F": "{#alt(q)}",
"R*F": "{#alt(r)}",
"S*F": "{#alt(s)}",
"T*F": "{#alt(t)}",
"*UF": "{#alt(u)}",
"W*U": "{#alt(u)}",
"SR*F": "{#alt(v)}",
"W*F": "{#alt(w)}",
"KP*F": "{#alt(x)}",
"KWR*F": "{#alt(y)}",
"STKPW*F": "{#alt(z)}",
#+END_SRC
** control
#+BEGIN_SRC js
"0*R": "{#control(0)}",
"1*R": "{#control(1)}",
"2*R": "{#control(2)}",
"3*R": "{#control(3)}",
"4*R": "{#control(4)}",
"5*R": "{#control(5)}",
"R*6": "{#control(6)}",
"R*7": "{#control(7)}",
"R*8": "{#control(8)}",
"R*9": "{#control(9)}",
"HR*RPB": "{#control(parenleft)}",
"PW*RPB": "{#control(bracketleft)}",
"TK*RPB": "{#control(braceleft)}",
"PWR*FR": "{#control(parenright)}",
"PWR*PB": "{#control(bracketright)}",
"PWR*LG": "{#control(braceright)}",
"KHR-R": "{#control(left)}",
"KHR-G": "{#control(right)}",
"KHR-P": "{#control(up)}",
"KHR-B": "{#control(down)}",
"R*EUPBS": "{#control(insert)}",
"R*T": "{#control(shift(plus))}",
"R*S": "{#control(minus)}",
"RO*EU": "{#control(slash)}",
"O*EUR": "{#control(slash)}",
"S*RP": "{#control(space)}",
"T*RB": "{#control(tab)}",
"TR*B": "{#control(tab)}",
"A*R": "{#control(a)}",
"PW*R": "{#control(b)}",
"KR*R": "{#control(c)}",
"TK*R": "{#control(d)}",
"R*E": "{#control(e)}",
"TP*R": "{#control(f)}",
"TKPW*R": "{#control(g)}",
"H*R": "{#control(h)}",
"*EUR": "{#control(i)}",
"R*EU": "{#control(i)}",
"SKWR*R": "{#control(j)}",
"K*R": "{#control(k)}",
"HR*R": "{#control(l)}",
"PH*R": "{#control(m)}",
"TPH*R": "{#control(n)}",
"O*R": "{#control(o)}",
"P*R": "{#control(p)}",
"KW*R": "{#control(q)}",
"R*R": "{#control(r)}",
"S*R": "{#control(s)}",
"T*R": "{#control(t)}",
"*UR": "{#control(u)}",
"R*U": "{#control(u)}",
"SR*R": "{#control(v)}",
"W*R": "{#control(w)}",
"KP*R": "{#control(x)}",
"KWR*R": "{#control(y)}",
"STKPW*R": "{#control(z)}",
#+END_SRC
** shift
#+BEGIN_SRC js
"SH*EUPBS": "{#shift(insert)}",
"SH*P": "{#shift(up)}",
"SH*B": "{#shift(down)}",
"SH*R": "{#shift(left)}",
"SH*G": "{#shift(right)}",
"SH*RB": "{#shift(control(left))}",
"SH*BG": "{#shift(control(right))}",
"ST*B": "{#shift(tab)}",
"T*BS": "{#shift(tab)}",
#+END_SRC
** win
#+BEGIN_SRC js
"*PB": "{#windows}",
"R*RPB": "{#windows(return)}",
"PWR*R": "{#windows(return)}",
"P*LG": "{#windows(up)}",
"K*LG": "{#windows(left)}",
"W*LG": "{#windows(down)}",
"R*LG": "{#windows(right)}",
"A*PB": "{#windows(a)}",
"PW*PB": "{#windows(b)}",
"KR*PB": "{#windows(c)}",
"TK*PB": "{#windows(d)}",
"*EPB": "{#windows(e)}",
"TP*PB": "{#windows(f)}",
"TKPW*PB": "{#windows(g)}",
"H*PB": "{#windows(h)}",
"*EUPB": "{#windows(i)}",
"SKWR*PB": "{#windows(j)}",
"K*PB": "{#windows(k)}",
"HR*PB": "{#windows(l)}",
"PH*PB": "{#windows(m)}",
"TPH*PB": "{#windows(n)}",
"O*PB": "{#windows(o)}",
"P*PB": "{#windows(p)}",
"KW*PB": "{#windows(q)}",
"R*PB": "{#windows(r)}",
"S*PB": "{#windows(s)}",
"T*PB": "{#windows(t)}",
"*UPB": "{#windows(u)}",
"SR*PB": "{#windows(v)}",
"W*PB": "{#windows(w)}",
"KP*PB": "{#windows(x)}",
"KWR*PB": "{#windows(y)}",
"STKPW*PB": "{#windows(z)}",
#+END_SRC
** win+shift
Same as the Windows key chords, but with the S key appended at the end.
#+BEGIN_SRC js
"A*PBS": "{#windows(shift(a))}",
"PW*PBS": "{#windows(shift(b))}",
"KR*PBS": "{#windows(shift(c))}",
"TK*PBS": "{#windows(shift(d))}",
"*EPBS": "{#windows(shift(e))}",
"TP*PBS": "{#windows(shift(f))}",
"TKPW*PBS": "{#windows(shift(g))}",
"H*PBS": "{#windows(shift(h))}",
"*EUPBS": "{#windows(shift(i))}",
"SKWR*PBS": "{#windows(shift(j))}",
"K*PBS": "{#windows(shift(k))}",
"HR*PBS": "{#windows(shift(l))}",
"PH*PBS": "{#windows(shift(m))}",
"TPH*PBS": "{#windows(shift(n))}",
"O*PBS": "{#windows(shift(o))}",
"P*PBS": "{#windows(shift(p))}",
"KW*PBS": "{#windows(shift(q))}",
"R*PBS": "{#windows(shift(r))}",
"S*PBS": "{#windows(shift(s))}",
"T*PBS": "{#windows(shift(t))}",
"*UPBS": "{#windows(shift(u))}",
"SR*PBS": "{#windows(shift(v))}",
"W*PBS": "{#windows(shift(w))}",
"KP*PBS": "{#windows(shift(x))}",
"KWR*PBS": "{#windows(shift(y))}",
"STKPW*PBS": "{#windows(shift(z))}",
#+END_SRC

* escape key

Pressing the number bar on its own triggers the Esc key.

#+BEGIN_SRC js
"#": "{#escape}",
#+END_SRC
* fingerspelling
In this section, we override the default behavior of fingerspelling to attach all fingerspelled letters/symbols/numbers to the end of the current word. This prevents Plover's automatic spacing from interfering with the typing of normal mode commands in vim.
** letters
#+BEGIN_SRC js
"A*": "{^}a",
"PW*": "{^}b",
"KR*": "{^}c",
"TK*": "{^}d",
"*E": "{^}e",
"TP*": "{^}f",
"TKPW*": "{^}g",
"H*": "{^}h",
"*EU": "{^}i",
"SKWR*": "{^}j",
"K*": "{^}k",
"HR*": "{^}l",
"PH*": "{^}m",
"TPH*": "{^}n",
"O*": "{^}o",
"P*": "{^}p",
"KW*": "{^}q",
"R*": "{^}r",
"S*": "{^}s",
"T*": "{^}t",
"*U": "{^}u",
"SR*": "{^}v",
"W*": "{^}w",
"KP*": "{^}x",
"KWR*": "{^}y",
"STKPW*": "{^}z",
"A*P": "{MODE:RESET}{^}A{MODE:LOWER}{MODE:SET_SPACE:}",
"PW*P": "{MODE:RESET}{^}B{MODE:LOWER}{MODE:SET_SPACE:}",
"KR*P": "{MODE:RESET}{^}C{MODE:LOWER}{MODE:SET_SPACE:}",
"TK*P": "{MODE:RESET}{^}D{MODE:LOWER}{MODE:SET_SPACE:}",
"*EP": "{MODE:RESET}{^}E{MODE:LOWER}{MODE:SET_SPACE:}",
"P*E": "{MODE:RESET}{^}E{MODE:LOWER}{MODE:SET_SPACE:}",
"TP*P": "{MODE:RESET}{^}F{MODE:LOWER}{MODE:SET_SPACE:}",
"TKPW*P": "{MODE:RESET}{^}G{MODE:LOWER}{MODE:SET_SPACE:}",
"H*P": "{MODE:RESET}{^}H{MODE:LOWER}{MODE:SET_SPACE:}",
"*EUP": "{MODE:RESET}{^}I{MODE:LOWER}{MODE:SET_SPACE:}",
"P*EU": "{MODE:RESET}{^}I{MODE:LOWER}{MODE:SET_SPACE:}",
"SKWR*P": "{MODE:RESET}{^}J{MODE:LOWER}{MODE:SET_SPACE:}",
"K*P": "{MODE:RESET}{^}K{MODE:LOWER}{MODE:SET_SPACE:}",
"HR*P": "{MODE:RESET}{^}L{MODE:LOWER}{MODE:SET_SPACE:}",
"PH*P": "{MODE:RESET}{^}M{MODE:LOWER}{MODE:SET_SPACE:}",
"TPH*P": "{MODE:RESET}{^}N{MODE:LOWER}{MODE:SET_SPACE:}",
"O*P": "{MODE:RESET}{^}O{MODE:LOWER}{MODE:SET_SPACE:}",
"P*P": "{MODE:RESET}{^}P{MODE:LOWER}{MODE:SET_SPACE:}",
"KW*P": "{MODE:RESET}{^}Q{MODE:LOWER}{MODE:SET_SPACE:}",
"R*P": "{MODE:RESET}{^}R{MODE:LOWER}{MODE:SET_SPACE:}",
"S*P": "{MODE:RESET}{^}S{MODE:LOWER}{MODE:SET_SPACE:}",
"T*P": "{MODE:RESET}{^}T{MODE:LOWER}{MODE:SET_SPACE:}",
"*UP": "{MODE:RESET}{^}U{MODE:LOWER}{MODE:SET_SPACE:}",
"P*U": "{MODE:RESET}{^}U{MODE:LOWER}{MODE:SET_SPACE:}",
"SR*P": "{MODE:RESET}{^}V{MODE:LOWER}{MODE:SET_SPACE:}",
"W*P": "{MODE:RESET}{^}W{MODE:LOWER}{MODE:SET_SPACE:}",
"KP*P": "{MODE:RESET}{^}X{MODE:LOWER}{MODE:SET_SPACE:}",
"KWR*P": "{MODE:RESET}{^}Y{MODE:LOWER}{MODE:SET_SPACE:}",
"STKPW*P": "{MODE:RESET}{^}Z{MODE:LOWER}{MODE:SET_SPACE:}",
#+END_SRC
** numbers
#+BEGIN_SRC js
"0": "{^}0",
"1": "{^}1",
"2": "{^}2",
"3": "{^}3",
"4": "{^}4",
"5": "{^}5",
"6": "{^}6",
"7": "{^}7",
"8": "{^}8",
"9": "{^}9",
"10-EU": "{^}01",
"20-EU": "{^}02",
"30-EU": "{^}03",
"40-EU": "{^}04",
"50-EU": "{^}05",
"60-EU": "{^}06",
"70-EU": "{^}07",
"80-EU": "{^}08",
"90-EU": "{^}09",
"01-EU": "{^}10",
"12": "{^}12",
"13": "{^}13",
"14": "{^}14",
"15": "{^}15",
"16": "{^}16",
"17": "{^}17",
"18": "{^}18",
"19": "{^}19",
"02-EU": "{^}20",
"12-EU": "{^}21",
"23": "{^}23",
"24": "{^}24",
"25": "{^}25",
"26": "{^}26",
"27": "{^}27",
"28": "{^}28",
"29": "{^}29",
"03-EU": "{^}30",
"13-EU": "{^}31",
"23-EU": "{^}32",
"34": "{^}34",
"35": "{^}35",
"36": "{^}36",
"37": "{^}37",
"38": "{^}38",
"39": "{^}39",
#+END_SRC
** symbol chars (e.g. !, @, #)
Assign these to the number keys, similar to a normal keyboard, using the star key ("*") as the modifier.
#+BEGIN_SRC js
"0*": "{^})",
"1*": "{^}!",
"2*": "{^}@",
"3*": "{^}#",
"4*": "{^}$",
"5*": "{^}%",
"*6": "{^}^",
"*7": "{^}&",
"*8": "{^}*",
"*9": "{^}(",
#+END_SRC
* pass-through keys
** Enter key
#+BEGIN_SRC js
"TR-Z": "{# return}",
#+END_SRC
** letters
#+NAME: pass-through-letters
#+BEGIN_SRC python :noweb yes :tangle no :results output silent

<<fingerspelling>>

for char, chord in l.iteritems():
        print('"{}-Z": "{{# {}}}",'.format(chord, char))
        print('"{}*Z": "{{# shift({})}}",'.format(chord, char))
#+END_SRC

#+BEGIN_SRC js :noweb tangle
<<pass-through-letters()>>
#+END_SRC
** numbers
#+NAME: pass-through-numbers
#+BEGIN_SRC python :tangle no :results output silent
for i in xrange(1, 99):
    if i <= 9:
            print('"{}Z": "{{#{}}}",'.format(i,i))
    else:
            digit1 = i // 10
            digit2 = i % 10
            swap_keys = ''
            if digit1 > digit2 and digit2 > 0:
                    digit1, digit2 = digit2, digit1
                    swap_keys = 'EU'
            if digit1 <= 5 and digit2 <= 5:
                    chord = '{}{}-{}'.format(digit1, digit2, swap_keys)
            if digit1 <= 5 and digit2 > 5:
                    chord = '{}-{}{}'.format(digit1, swap_keys, digit2)
            if digit1 > 5 and digit2 > 5:
                    chord = '-{}{}{}'.format(swap_keys, digit1, digit2)
            print('"{}Z": "{{#{}}}",'.format(chord, i))
#+END_SRC

#+BEGIN_SRC js :noweb tangle
<<pass-through-numbers()>>
#+END_SRC
** symbol chars (e.g. !, @, #)
Assign these to the number keys, similar to a normal keyboard, using the star key ("*") as the modifier.
#+BEGIN_SRC js
"0*Z": "{# parenright}",
"1*Z": "{# exclam}",
"2*Z": "{# at}",
"3*Z": "{# numbersign}",
"4*Z": "{# dollar}",
"5*Z": "{# percent}",
"*6Z": "{# asciicircum}",
"*7Z": "{# ampersand}",
"*8Z": "{# asterisk}",
"*9Z": "{# parenleft}",
#+END_SRC
** spacebar
#+BEGIN_SRC js
"SP-Z": "{# space}",
#+END_SRC
** digrams

I find the ability to fingerspell digrams (two-letter combinations) to be very handy. For example, I have used various vim plugins for Firefox/Chrome (e.g. Vimperator, Vimium, VimFX, tridactyl) that allow keyboard navigation of hyperlinks by labeling the links with two-letter "hints".

The idea behind these chords is to fingerspell the first letter with the left hand as usual, and to use the right hand to fingerspell the second letter. The chords for fingerspelling with the right hand are the mirror image of the chords for the left hand. For example, the right hand chord for "m" is -FP. Finally, all digram chords end with the Z key.

#+NAME: pass-through-digrams
#+BEGIN_SRC python :noweb yes :tangle no :results output silent

<<fingerspelling>>

for key1, value1 in l.iteritems():
    for key2, value2 in r.iteritems():
        # both letters lowercase
        print('"{}-{}Z": "{{# {} {}}}",'.format(value1,value2,key1,key2))
        # first letter uppercase
        print('"{}*-{}Z": "{{# shift({}) {}}}",'.format(value1,value2,key1,key2))
        # second letter uppercase
        print('"{}-{}DZ": "{{# {} shift({})}}",'.format(value1,value2,key1,key2))
        # both letters uppercase
        print('"{}*-{}DZ": "{{# shift({}) shift({})}}",'.format(value1,value2,key1,key2))
#+END_SRC

#+BEGIN_SRC js :noweb tangle
<<pass-through-digrams()>>
#+END_SRC
** trigrams
Handy trigrams for vim.

#+BEGIN_SRC js
"KR-EUBZ": "{# c i w}",
"KRA-BZ": "{# c a w}",
"KR-EUBDZ": "{# c i shift(w)}",
"KRA-BDZ": "{# c a shift(w)}",
"KR-EUGSZ": "{# c i quotedbl}",
"KRA-GSZ": "{# c a quotedbl}",
"TK-EUBZ": "{# d i w}",
"TKA-BZ": "{# d a w}",
"TK-EUBDZ": "{# d i shift(w)}",
"TKA-BDZ": "{# d a shift(w)}",
"KWR-EUBZ": "{# y i w}",
"KWRA-BZ": "{# y a w}",
"KWR-EUBDZ": "{# y i shift(w)}",
"KWRA-BDZ": "{# y a shift(w)}",
#+END_SRC

* people's names
#+BEGIN_SRC js
"TPHAFRPB": "Inanc",
"REPB/AEU": "Rene",
"RUP": "Rup",
"RAOUP": "Rup",
"SHAUPB": "Shaun",
"SRA-PBD": "Vandervalk",
#+END_SRC
* Plover meta commands
** capitalization

   Capitalize the next word.
#+BEGIN_SRC js
"KPA": "{MODE:RESET}{-|}",
#+END_SRC

Capitalize the next word and join it to the end of the current word (suppress automatic spacing).
#+BEGIN_SRC js
"KPA*": "{MODE:RESET}{^}{-|}",
#+END_SRC

Retroactively capitalize the last word.
#+BEGIN_SRC js
"KPA-D": "{MODE:RESET}{*-|}",
#+END_SRC

Retroactively lowercase the last word. (Mnemonic: "U" for uncapitalize.)
#+BEGIN_SRC js
"KPA-UD": "{*>}",
#+END_SRC

Make the next word all uppercase/lowercase.
#+BEGIN_SRC js
"HRO*ER": "{>}",
#+END_SRC

Retroactively lowercase/uppercase.
#+BEGIN_SRC js
"-FRD": "{MODE:RESET}{*>}",
"-RGD": "{MODE:RESET}{*<}",
#+END_SRC

** dictionary lookup
  Open up Plover's handy reverse dictionary lookup dialog, where one can type (fingerspell) any word and see what steno chords generate that word.
#+BEGIN_SRC js
"TKHRUP": "{PLOVER:LOOKUP}",
#+END_SRC
** Plover modes (e.g. all-caps)
#+BEGIN_SRC js
"KR*PL": "{MODE:CAPS}{MODE:SET_SPACE:_}",
"TK*PL": "{MODE:RESET}",
"R*PL": "{MODE:RESET}",
"P*PL": "{MODE:LOWER}{MODE:SET_SPACE:}",
"HR*PL": "{MODE:LOWER}{MODE:SET_SPACE: }",
#+END_SRC
** spacing

Override the default space key binding to insert a space, even when the space character is "". (The space character is "" whenever we are in the default mode, where automatic capitalization and automatic spacing are disabled. We return to the default mode whenever we press Escape.)

#+BEGIN_SRC js
"S-P": "{MODE:RESET}{^ ^}{MODE:LOWER}{MODE:SET_SPACE:}",
#+END_SRC

Insert a space and switch to the default Plover mode at the same time.

#+BEGIN_SRC js
"S-PS": "{MODE:RESET}{^ ^}",
#+END_SRC

Retroactively insert a space before the last word.
#+BEGIN_SRC js
"-FPD": "{MODE:RESET}{*?}",
"S-PD": "{MODE:RESET}{*?}",
#+END_SRC

Retroactively delete a space before the last word.
#+BEGIN_SRC js
"TK-FPD": "{*!}",
#+END_SRC

Attach the next word to the end of the current word.
#+BEGIN_SRC js
"SKHR-PB": "{^};",
#+END_SRC
* uncategorized
#+BEGIN_SRC js
"*T": "{*}",
"*FP": "{#space}",
"UFP": "{^}_{^}",
"TK-FP": "{^}",
"SPWR-TS": ">>",
"SPWR-S": ">>",
"T-B": "{#tab}",
"T-PB": "{#shift(tab)}",
"TP-B": "{#shift(tab)}",
"STPH-T": "{#page_up}",
"STPH-S": "{#page_down}",
"*F": "{#page_up}",
"*R": "{#page_down}",
"*P": "{#home}",
"STPH-F": "{#home}",
"*L": "{#end}",
"STPH-L": "{#end}"
#+END_SRC

* end dictionary
#+BEGIN_SRC js
}
#+END_SRC
