* Load Path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/private/local")
#+END_SRC
* Autocompletion
#+BEGIN_SRC emacs-lisp
;; enable autocomplete always
(global-company-mode)
;; don't bring up autocomplete menu automatically
(setq company-idle-delay nil)
;; main autocomplete params
(setq-default dotspacemacs-configuration-layers '(
  (auto-completion :variables
                   auto-completion-return-key-behavior 'complete
                   auto-completion-tab-key-behavior 'complete-selection
                   auto-completion-complete-with-key-sequence nil
                   auto-completion-private-snippets-directory nil)))

(with-eval-after-load 'company
	(define-key company-active-map (kbd "TAB") 'company-complete-selection)
	(define-key company-active-map (kbd "C-n") 'company-select-next)
	(define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC
* Avy
** Aesthetics
#+BEGIN_SRC emacs-lisp
;; don't grey out the background when prompting for jump target
(setq avy-background nil)
;; make avy jump hints more readable
(custom-set-faces
 '(default ((t (:background nil))))
 '(avy-lead-face ((t (:foreground "red" :background "white"))))
 '(avy-lead-face-0 ((t (:foreground "red" :background "white"))))
 '(avy-lead-face-1 ((t (:foreground "red" :background "white"))))
 '(avy-lead-face-2 ((t (:foreground "red" :background "white"))))
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil)))))
#+END_SRC
** Jumping Around the Buffer
#+BEGIN_SRC emacs-lisp
;; avy is "hint"-based motion. Type two leading chars of where you want to go
(define-key evil-normal-state-map (kbd "s") 'avy-goto-char-2)
(define-key evil-motion-state-map (kbd "s") 'avy-goto-char-2)
;; use avy as a vim motion
;; (disabled because it conflicts with vim paste operator)
;(define-key evil-motion-state-map (kbd "p") 'avy-goto-char-2)
#+END_SRC
** Copy/Paste
#+BEGIN_SRC emacs-lisp
(defun benv/copy-word-here (pt)
    (message "Calling")
    (save-excursion
    (goto-char pt)
    (kill-new (thing-at-point 'symbol))))

(defun benv/avy-word-regex (c)
   (concat
   "\\b"
   (string c)))

(defun benv/avy-copy-word-here (char)
   "Paste a word selected with avy"
   (interactive (list (read-char "char:" t)))
   (let ((avy-action 'benv/copy-word-here))
       (avy--generic-jump (benv/avy-word-regex char) nil avy-style)
       (yank)))

(spacemacs/declare-prefix "y" "yank")
(evil-leader/set-key
  "yw" 'benv/avy-copy-word-here)
#+END_SRC
* Clock
Display the time in the modeline.
#+BEGIN_SRC emacs-lisp
(setq display-time-default-load-average nil)
(display-time-mode t)
#+END_SRC
* Buffer Wrangling
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
    "br" 'rename-buffer)
#+END_SRC
* Dired / Ranger / Deer
#+BEGIN_SRC emacs-lisp
;; if two dired windows are open, make the default
;; target of copy/move commands the other dired window
(setq dired-dwim-target t)

(defun dired-open-file ()
    "In dired, open the file named on this line."
    (interactive)
    (let* ((file (dired-get-filename nil t)))
        (call-process "xdg-open" nil 0 nil file)))

(add-hook 'dired-mode-hook 'dired-hide-details-mode)

;; Replace default `ranger-search-files`, used for
;; rapid navigation by fuzzy finding.  `helm-find-files-1`
;; does not correctly handle directory names
;; containing tilde (`~`), so I expand the tilde away with
;; `expand-file-name` first.
(defun ranger-search-files ()
  "Search for files / directories in folder."
  (interactive)
  (helm-find-files-1 (expand-file-name default-directory)))
#+END_SRC
* Direx
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'direx
  (add-hook 'direx:direx-mode-hook
			(lambda ()
			  (define-key evil-normal-state-local-map (kbd "RET") 'direx:display-item)
			  (define-key evil-normal-state-local-map (kbd "za") 'direx:toggle-item)
			  (define-key evil-normal-state-local-map (kbd "zc") 'direx:collapse-item)
			  (define-key evil-normal-state-local-map (kbd "zo") 'direx:expand-item)
			  (define-key evil-normal-state-local-map (kbd "zO") 'direx:expand-item-recursively))))
#+END_SRC
* ESS
#+BEGIN_SRC emacs-lisp
;; fixes ESS error when projectile has not yet been used/loaded
(autoload 'projectile-project-p "projectile")
(require 'ess-site)
#+END_SRC
* Evil Mode Settings
#+BEGIN_SRC emacs-lisp
;; don't permanently highlight search matches
(global-evil-search-highlight-persist nil)
;; don't move cursor left after escaping
;; from insert mode
(setq evil-move-cursor-back nil)
#+END_SRC
** evil-easymotion
#+BEGIN_SRC emacs-lisp
(evilem-default-keybindings "'")
#+END_SRC
* External Programs
#+BEGIN_SRC emacs-lisp
;; set default browser to firefox
(setq browse-url-browser-function 'browse-url-generic
	  browse-url-generic-program (case system-type
								   ((gnu/linux) "firefox")
								   ((cygwin) "cygstart")))
#+END_SRC
* Email
#+BEGIN_SRC emacs-lisp
(setq email-config-org "~/.emacs.d/private/local/email-config.org")
(if (file-exists-p email-config-org)
    (org-babel-load-file email-config-org))

;; run when composing e-mails (notmuch-message-mode / message-mode)

(defun benv/message-setup-hook ()
  (spacemacs/toggle-auto-fill-mode-off)
  (visual-line-mode))

(add-hook 'message-setup-hook 'benv/message-setup-hook)
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
(setq flycheck-display-errors-function 'flycheck-display-error-messages)
#+END_SRC
* GDB
#+BEGIN_SRC emacs-lisp
;; bring up one window with GDB REPL and one window with source code
(setq gdb-many-windows nil)
(setq gdb-show-main t)

;; Hack to show current source line while stepping in GDB:
;; highlight current line in buffer, even when window is
;; not focused
(setq global-hl-line-sticky-flag t)
(global-hl-line-mode)

;; force gdb-mi to not dedicate any windows
(advice-add 'gdb-display-buffer
	    :around (lambda (orig-fun &rest r)
		      (let ((window (apply orig-fun r)))
			(set-window-dedicated-p window nil)
			window)))

(advice-add 'gdb-set-window-buffer
	    :around (lambda (orig-fun name &optional ignore-dedicated window)
		      (funcall orig-fun name ignore-dedicated window)
		      (set-window-dedicated-p window nil)))
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
;; workaround helm bug: https://github.com/syl20bnr/spacemacs/pull/9547
(require 'helm-bookmark)

;; don't truncate buffer names in the buffer list
;; (the default truncation length of 20 chars often makes
;; it impossible to identify the buffer I am looking for)
(setq helm-buffer-max-length nil)
#+END_SRC
* Code Indentation Settings
  #+BEGIN_SRC emacs-lisp
  ;; set default tab width to 4 spaces
  (setq-default tab-width 4)
  ;; use tabs for indentation
  (setq-default indent-tabs-mode t)

  (c-add-style "abyss-style"
	  '("linux"
		(indent-tabs-mode . t)
		(c-basic-offset . 4)
		(c-offsets-alist . ((inline-open . 0)
							(arglist-cont-nonempty . +)
							(arglist-cont . 0)
							(stream-op . +)))))

  (defun my-c++-mode-hook()
	(c-set-style "abyss-style"))

  (defun my-csharp-mode-hook()
	(my-c++-mode-hook)
	(setq company-idle-delay 0.1))

  (add-hook 'c-mode-common-hook 'my-c++-mode-hook)
  (add-hook 'csharp-mode-hook 'my-csharp-mode-hook)
  #+END_SRC
* Key Bindings
#+BEGIN_SRC emacs-lisp
;; custom keys for org mode
(evil-define-key 'normal evil-org-mode-map
 "L" 'org-demote-subtree
 "H" 'org-promote-subtree
 "\C-j" 'org-move-subtree-down
 "\C-k" 'org-move-subtree-up)
;; bindings for company mode
(define-key evil-insert-state-map (kbd "M-.") 'company-complete)
;; hippie expansion (buffer-based completion)
(define-key evil-insert-state-map (kbd "M-/") 'hippie-expand)
;; "zl" to fold all code blocks at current indentation level
(define-key evil-normal-state-map (kbd "zl") 'hs-hide-level)
#+END_SRC
* Line Numbering
#+BEGIN_SRC emacs-lisp
;; turn on line numbering
(global-linum-mode)
;; make line numbers relative to current line
(linum-relative-mode)
#+END_SRC
* Org Mode
** Org Babel

Some settings for source code blocks:

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
'((dot . t) (asymptote . t)))
;; don't alter indentation (e.g. tabs vs. spaces) when embedding source code blocks
(setq org-src-preserve-indentation t)
;; edit source code in "other window" when pressing <C-'>
(setq org-src-window-setup 'other-window)
#+END_SRC

Set up a keybinding for hiding/showing all code blocks.  Also: hide all code blocks by default when first opening an org file.

#+BEGIN_SRC emacs-lisp
(defvar org-blocks-hidden nil)

(defun org-toggle-blocks ()
  (interactive)
  (if org-blocks-hidden
      (org-show-block-all)
    (org-hide-block-all))
  (setq-local org-blocks-hidden (not org-blocks-hidden)))

(add-hook 'org-mode-hook 'org-toggle-blocks)

(define-key org-mode-map (kbd "C-c t") 'org-toggle-blocks)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
;; FIX: make sure projectile using the correct `ctags` binary
(setq projectile-tags-command "ctags-exuberant -Re -f \"%s\" %s")
#+END_SRC
* rtags
#+BEGIN_SRC emacs-lisp
;; basic rtags setup

(setq rtags-lisp-directory "/projects/btl/benv/arch/centos6/linuxbrew-supplement/rtags-2.9/share/emacs/site-lisp/rtags")

(when (file-accessible-directory-p rtags-lisp-directory)
  (progn
	;; load rtags package
	(add-to-list 'load-path rtags-lisp-directory)
	(require 'rtags)

	;; start rtags automatically when editing C/C++ files
	(add-hook 'c-mode-common-hook 'rtags-start-process-unless-running)
	(add-hook 'c++-mode-common-hook 'rtags-start-process-unless-running)

	;; enable default keybindings
	(rtags-enable-standard-keybindings)

	;; custom keybindings
	(evil-leader/set-key-for-mode 'c-mode
	  "mgg" 'rtags-find-symbol-at-point
	  "mgs" 'rtags-find-symbol)
	(evil-leader/set-key-for-mode 'c++-mode
	  "mgg" 'rtags-find-symbol-at-point
	  "mgs" 'rtags-find-symbol)

	;; rtags-company
	(setq rtags-autostart-diagnostics t)
	(setq rtags-completions-enabled t)
	(push 'company-rtags company-backends)

	;; rtags-helm
	(require 'rtags-helm)
	(setq rtags-display-result-backend 'helm)

	;; flycheck-rtags
	(require 'flycheck-rtags)
	(defun my-flycheck-rtags-setup ()
	  (flycheck-select-checker 'rtags)
	  (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
	  (setq-local flycheck-check-syntax-automatically nil))
	(add-hook 'c-mode-hook #'my-flycheck-rtags-setup)
	(add-hook 'c++-mode-hook #'my-flycheck-rtags-setup)
	(add-hook 'objc-mode-hook #'my-flycheck-rtags-setup)))

#+END_SRC
* Shell
** readline-like key bindings
#+BEGIN_SRC emacs-lisp
;; set to bash instead of zsh to avoid avoid unsupported escape codes in prompt, etc.
(setq shell-file-name "/bin/bash")
(with-eval-after-load 'shell
  (evil-define-key 'normal shell-mode-map
	(kbd "C-a") 'beginning-of-line
	(kbd "C-e") 'end-of-line
	(kbd "C-k") 'kill-line
	(kbd "M-r") 'spacemacs/helm-shell-history)
  (evil-define-key 'insert shell-mode-map
	(kbd "C-a") 'beginning-of-line
	(kbd "C-e") 'end-of-line
	(kbd "C-k") 'kill-line
	(kbd "M-r") 'spacemacs/helm-shell-history))
#+END_SRC
** compilation-minor-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'shell-mode-hook 'compilation-shell-minor-mode)

(defun benv/compile-error-next ()
  "Go to next compile error and display source line in other window"
	(interactive)
	(compilation-next-error 1)
	(compilation-display-error))

(defun benv/compile-error-prev ()
  "Go to previous compile error and display source line in other window"
  (interactive)
  (compilation-previous-error 1)
  (compilation-display-error))

(evil-leader/set-key-for-mode 'shell-mode
    (kbd "en") 'benv/compile-error-next
    (kbd "ep") 'benv/compile-error-prev)
#+END_SRC

(spacemacs/declare-prefix "am" "multishell")
(evil-leader/set-key
  "ams" (lambda() (interactive)
		  (setq current-prefix-arg '(4))
		  (call-interactively 'multishell-pop-to-shell)))
#+END_SRC
* Splitting Windows
#+BEGIN_SRC emacs-lisp
;; disable automatic window splitting
;; where possible
(setq-default split-width-threshold nil)
(setq split-width-threshold nil)
(setq-default split-height-threshold nil)
(setq split-height-threshold nil)
(shackle-mode)
(setq shackle-default-rule '(:same t))
#+END_SRC
