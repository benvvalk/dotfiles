* Autocompletion
#+BEGIN_SRC emacs-lisp
;; enable autocomplete always
(global-company-mode)
;; don't bring up autocomplete menu automatically
(setq company-idle-delay nil)
;; main autocomplete params
(setq-default dotspacemacs-configuration-layers '(
  (auto-completion :variables
                   auto-completion-return-key-behavior 'complete
                   auto-completion-tab-key-behavior 'cycle
                   auto-completion-complete-with-key-sequence nil
                   auto-completion-private-snippets-directory nil)
                   ))
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
;; use avy as a vim operator
(define-key evil-motion-state-map (kbd "z") #'avy-goto-char-2)
;; don't grey out the background when prompting for jump target
(setq avy-background nil)
;; make avy jump hints more readable
(custom-set-faces
 '(default ((t (:background nil))))
 '(avy-lead-face ((t (:foreground "red"))))
 '(avy-lead-face-0 ((t (:foreground "red"))))
 '(avy-lead-face-1 ((t (:foreground "red"))))
 '(avy-lead-face-2 ((t (:foreground "red"))))
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
#+END_SRC
* Evil Mode Settings
#+BEGIN_SRC emacs-lisp
;; don't permanently highlight search matches
(global-evil-search-highlight-persist nil)
;; don't move cursor left after escaping
;; from insert mode
(setq evil-move-cursor-back nil)
#+END_SRC
* External Programs
#+BEGIN_SRC emacs-lisp
;; set default browser to firefox
(setq browse-url-browser-function 'browse-url-generic
     browse-url-generic-program "firefox")
#+END_SRC
* Indentation Settings
#+BEGIN_SRC emacs-lisp
;; set default tab width to 4 spaces
(setq-default tab-width 4)
;; use tabs for indentation
(setq-default indent-tabs-mode t)
;; C code style (see: https://en.wikipedia.org/wiki/Indent_style)
(setq c-default-style "stroustrup"
     c-basic-offset 4)
;; C/C++ statements split across multiple lines
(defun abyss-c-style ()
    (c-set-offset 'arglist-cont-nonempty '+)
    (c-set-offset 'arglist-cont '+)
    (c-set-offset 'stream-op '+))
(add-hook 'c-mode-common-hook 'abyss-c-style)
#+END_SRC
* Key Bindings
#+BEGIN_SRC emacs-lisp
;; custom keys for org mode
(evil-define-key 'normal evil-org-mode-map
 "L" 'org-demote-subtree
 "H" 'org-promote-subtree
 "\C-j" 'org-move-subtree-down
 "\C-k" 'org-move-subtree-up)
;; bindings for company mode
(define-key evil-insert-state-map (kbd "M-.") 'company-complete-common)
;; hippie expansion (buffer-based completion)
(define-key evil-insert-state-map (kbd "M-/") 'hippie-expand)
;; vim-sneak replacement (avy mode)
(define-key evil-normal-state-map (kbd "s") 'avy-goto-char-2)
#+END_SRC
* Line Numbering
#+BEGIN_SRC emacs-lisp
;; turn on line numbering
(global-linum-mode)
;; make line numbers relative to current line
(linum-relative-mode)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
;; FIX: make sure projectile using the correct `ctags` binary
(setq projectile-tags-command "ctags-exuberant -Re -f \"%s\" %s")
#+END_SRC
* Splitting Windows
#+BEGIN_SRC emacs-lisp
;; disable automatic window splitting
;; where possible
(setq-default split-width-threshold nil)
(setq split-width-threshold nil)
(setq-default split-height-threshold nil)
(setq split-height-threshold nil)
(shackle-mode)
(setq shackle-default-rule '(:same t))
#+END_SRC
