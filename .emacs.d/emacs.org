* Load Path
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/private/local")
#+END_SRC
* Autocompletion
#+BEGIN_SRC emacs-lisp
;; enable autocomplete always
(global-company-mode)
;; don't bring up autocomplete menu automatically
(setq company-idle-delay nil)
;; main autocomplete params
(setq-default dotspacemacs-configuration-layers '(
  (auto-completion :variables
                   auto-completion-return-key-behavior 'complete
                   auto-completion-tab-key-behavior 'cycle
                   auto-completion-complete-with-key-sequence nil
                   auto-completion-private-snippets-directory nil)
                   ))
#+END_SRC
* Avy
#+BEGIN_SRC emacs-lisp
;; avy is "hint"-based motion. Type two leading chars of where you want to go
(define-key evil-normal-state-map (kbd "s") 'avy-goto-char-2)
;; use avy as a vim motion
;; (disabled because it conflicts with vim paste operator)
;(define-key evil-motion-state-map (kbd "p") 'avy-goto-char-2)
;; don't grey out the background when prompting for jump target
(setq avy-background nil)
;; make avy jump hints more readable
(custom-set-faces
 '(default ((t (:background nil))))
 '(avy-lead-face ((t (:foreground "red" :background "white"))))
 '(avy-lead-face-0 ((t (:foreground "red" :background "white"))))
 '(avy-lead-face-1 ((t (:foreground "red" :background "white"))))
 '(avy-lead-face-2 ((t (:foreground "red" :background "white"))))
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
#+END_SRC
* Dired
  #+BEGIN_SRC emacs-lisp
  ;; if two dired windows are open, make the default
  ;; target of copy/move commands the other dired window
  (setq dired-dwim-target t)
  #+END_SRC
* Direx
#+BEGIN_SRC emacs-lisp
(with-eval-after-load 'direx
  (add-hook 'direx:direx-mode-hook
			(lambda ()
			  (define-key evil-normal-state-local-map (kbd "RET") 'direx:display-item)
			  (define-key evil-normal-state-local-map (kbd "za") 'direx:toggle-item)
			  (define-key evil-normal-state-local-map (kbd "zc") 'direx:collapse-item)
			  (define-key evil-normal-state-local-map (kbd "zo") 'direx:expand-item)
			  (define-key evil-normal-state-local-map (kbd "zO") 'direx:expand-item-recursively))))
#+END_SRC
* Evil Mode Settings
#+BEGIN_SRC emacs-lisp
;; don't permanently highlight search matches
(global-evil-search-highlight-persist nil)
;; don't move cursor left after escaping
;; from insert mode
(setq evil-move-cursor-back nil)
#+END_SRC
** evil-easymotion
#+BEGIN_SRC emacs-lisp
(evilem-default-keybindings "'")
#+END_SRC
* External Programs
#+BEGIN_SRC emacs-lisp
;; set default browser to firefox
(setq browse-url-browser-function 'browse-url-generic
	  browse-url-generic-program (case system-type
								   ((gnu/linux) "firefox")
								   ((cygwin) "cygstart")))
#+END_SRC
* Email
#+BEGIN_SRC emacs-lisp
(setq email-config-org "~/.emacs.d/private/local/email-config.org")
(if (file-exists-p email-config-org)
    (org-babel-load-file email-config-org))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
(setq flycheck-display-errors-function 'flycheck-display-error-messages)
#+END_SRC
* Indentation Settings
#+BEGIN_SRC emacs-lisp
;; set default tab width to 4 spaces
(setq-default tab-width 4)
;; use tabs for indentation
(setq-default indent-tabs-mode t)
;; C code style (see: https://en.wikipedia.org/wiki/Indent_style)
(setq c-default-style "stroustrup"
     c-basic-offset 4)
;; C/C++ statements split across multiple lines
(defun abyss-c-style ()
    (c-set-offset 'arglist-cont-nonempty '+)
    (c-set-offset 'arglist-cont '+)
    (c-set-offset 'stream-op '+))
(add-hook 'c-mode-common-hook 'abyss-c-style)
(add-hook 'csharp-mode-hook 'abyss-c-style)
#+END_SRC
* Key Bindings
#+BEGIN_SRC emacs-lisp
;; custom keys for org mode
(evil-define-key 'normal evil-org-mode-map
 "L" 'org-demote-subtree
 "H" 'org-promote-subtree
 "\C-j" 'org-move-subtree-down
 "\C-k" 'org-move-subtree-up)
;; bindings for company mode
(define-key evil-insert-state-map (kbd "M-.") 'company-complete)
;; hippie expansion (buffer-based completion)
(define-key evil-insert-state-map (kbd "M-/") 'hippie-expand)
;; "zl" to fold all code blocks at current indentation level
(define-key evil-normal-state-map (kbd "zl") 'hs-hide-level)
#+END_SRC
* Line Numbering
#+BEGIN_SRC emacs-lisp
;; turn on line numbering
(global-linum-mode)
;; make line numbers relative to current line
(linum-relative-mode)
#+END_SRC
* Org Mode
** Org Babel

Some settings for source code blocks:

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
'((dot . t) (asymptote . t)))
;; don't alter indentation (e.g. tabs vs. spaces) when embedding source code blocks
(setq org-src-preserve-indentation t)
;; edit source code in "other window" when pressing <C-'>
(setq org-src-window-setup 'other-window)
#+END_SRC

Set up a keybinding for hiding/showing all code blocks.  Also: hide all code blocks by default when first opening an org file.

#+BEGIN_SRC emacs-lisp
(defvar org-blocks-hidden nil)

(defun org-toggle-blocks ()
  (interactive)
  (if org-blocks-hidden
      (org-show-block-all)
    (org-hide-block-all))
  (setq-local org-blocks-hidden (not org-blocks-hidden)))

(add-hook 'org-mode-hook 'org-toggle-blocks)

(define-key org-mode-map (kbd "C-c t") 'org-toggle-blocks)
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
;; FIX: make sure projectile using the correct `ctags` binary
(setq projectile-tags-command "ctags-exuberant -Re -f \"%s\" %s")
#+END_SRC
* rtags
#+BEGIN_SRC emacs-lisp
;; basic rtags setup
(add-to-list 'load-path "/projects/btl/benv/arch/centos6/linuxbrew-supplement/rtags-2.9/share/emacs/site-lisp/rtags")
(require 'rtags)
(add-hook 'c-mode-common-hook 'rtags-start-process-unless-running)
(add-hook 'c++-mode-common-hook 'rtags-start-process-unless-running)

(rtags-enable-standard-keybindings)
(evil-leader/set-key-for-mode 'c-mode
    "mgg" 'rtags-find-symbol-at-point
    "mgs" 'rtags-find-symbol)
(evil-leader/set-key-for-mode 'c++-mode
    "mgg" 'rtags-find-symbol-at-point
    "mgs" 'rtags-find-symbol)

;; rtags-company
(setq rtags-autostart-diagnostics t)
(setq rtags-completions-enabled t)
(push 'company-rtags company-backends)

;; rtags-helm
(require 'rtags-helm)
(setq rtags-display-result-backend 'helm)

;; flycheck-rtags
(require 'flycheck-rtags)

(defun my-flycheck-rtags-setup ()
  (flycheck-select-checker 'rtags)
  (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
  (setq-local flycheck-check-syntax-automatically nil))
(add-hook 'c-mode-hook #'my-flycheck-rtags-setup)
(add-hook 'c++-mode-hook #'my-flycheck-rtags-setup)
(add-hook 'objc-mode-hook #'my-flycheck-rtags-setup)
#+END_SRC
* Shell
#+BEGIN_SRC emacs-lisp
;; set to bash instead of zsh to avoid avoid unsupported escape codes in prompt, etc.
(setq shell-file-name "/bin/bash")
(with-eval-after-load 'shell
  (evil-define-key 'normal shell-mode-map
	(kbd "C-a") 'beginning-of-line
	(kbd "C-e") 'end-of-line
	(kbd "C-k") 'kill-line
	(kbd "C-r") 'spacemacs/helm-shell-history)
  (evil-define-key 'insert shell-mode-map
	(kbd "C-a") 'beginning-of-line
	(kbd "C-e") 'end-of-line
	(kbd "C-k") 'kill-line
	(kbd "C-r") 'spacemacs/helm-shell-history))
#+END_SRC
* Splitting Windows
#+BEGIN_SRC emacs-lisp
;; disable automatic window splitting
;; where possible
(setq-default split-width-threshold nil)
(setq split-width-threshold nil)
(setq-default split-height-threshold nil)
(setq split-height-threshold nil)
(shackle-mode)
(setq shackle-default-rule '(:same t))
#+END_SRC
