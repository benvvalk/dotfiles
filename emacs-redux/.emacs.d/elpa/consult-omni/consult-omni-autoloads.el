;;; consult-omni-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from consult-omni.el

(autoload 'consult-omni-define-source "consult-omni" "\
Macro to make a consult-omni-source for SOURCE-NAME with ARGS.

Generates the following:
  - a source plist
  - interactive commands (static or dynamic) for single source
  - adds a new row to to `consult-omni--sources-alist' with all the
    metadata as a property list.

Description of Arguments:

  Brief Description:

  ==========   ========  =================================================
  Keyword      Type      Explanation
  ==========   ========  =================================================
  TYPE         symbol    How to collect items for source?
                         (one of ='sync, ='dynamic, or ='async)
  REQUEST      function  Fetch results from source
  TRANSFORM    funciton  Function to transform/format candidates
  FILTER       funciton  Function to filter candidates
  MIN-INPUT    number    Minimum number of characters for fetching results
                         This is used in dynamic commands only
  VALID-INPUT  function  Predicate function for valid user's input string
                         This is used in dynamic commands only
  ON-SETUP     function  Setup action in `consult--read'
  ON-PREVIEW   function  Preview action in `consult--read'
  ON-RETURN    function  Return action in `consult--read'
  ON-EXIT      function  Exit action in `consult--read'
  STATE        function  STATE passed to `consult--read'
                         (bypasses ON-PREVIEW and ON-RETURN)
  ON-CALLBACK  function  Function called on selected candidate
  ON-NEW       function  Function called on non-existing candidate
  REUIRE-MATCH function  Can non-matching candidates be selected
  INTERACTIVE  symbol    make ='dynamic, ='static or ='both commands
  LOOKUP       function  Lookup function for `consult--read'
  GROUP        function  Passed as GROUP to `consult--read'
  NARROW-CHAR  char      Passed as NARROW to `consult-read'
  CATEGORY     symbol    Passed as CATEGORY to `consult--read'
  SEARCH-HIST  symbol    Passed as HISTORY to `consult--read'
  SELECT-HIST  symbol    Collects list of selected items
  ADD-HIST     list      List of items to add to the history.
  FACE         face      Passed as FACE to `consult--read-multi'
  ANNOTATE     function  Passed as ANNOTATE to `consult--read'
  ENABLED      function  Passed as ENABLED to `consult--read'
  SORT         boolean   Passed as SORT to `consult--read'
  PREDICATE    function  Passed as PREDICATE to `consult--read'
  PREVIEW-KEY  key       Passed as PREVIEW-KEY to `consult--read'
  DOCSTRING    string    DOCSTRING for the SOURCE-NAME variable
  ========================================================================

  Detailed Decription:

  TYPE can be ='sync, ='dynamic or ='async, depending on how the items
       for the source should be collected.
       - ='sync    sources get their candidates from a synchronous elisp
                    function (i.e. a function that returns a list).
       - ='dynamic sources use an elisp function that runs asynchronously
                    to produce list of candidates (e.g. a web request that
                    runs in the background)
       - ='async   sources run a shell process (e.g. a command line)
                    asynchronously and return the results (lines from
                    stdout) as list of candidates.
       Note that all three types can have dynamic completion
       (meaning that the funciton takes an input argument and returns
       the result based on the input), but the difference is whether the
       function uses synchronous or asynchronous collection and whether it
       is an elsip function or a shell subprocess.

  REQUEST is a function that returns the list of candidates.
          - In synchronous sources, REQEUEST can take 0 or 1 input
            argument, and returns a list of candidates.
          - In asynchronous sources, REQUEST takes at least 1 input
            argument, and returns a list of strings that are command line
            process arguments.
          - In dynamic sources, REQUEST takes at least 1 input argument and
            a keyword argument called CALLBACK.  The CALLBACK should be
            called with candidates as input in the body.
            Here is the recommended format:
            (cl-defun REQUEST (input
                               &rest args
                               &key callback
                               &allow-other-keys)
              BODY
              (when callback (funcall callback candidates))
              candidates)
           See `consult-omni--brave-fetch-results' and
           `consult-omni--grep-builder' for examples.  More examples
           can be found in the wiki pages of the repo or in
           Lisp files under “sources” directory.

  TRANSFORM is a function that takes a list of candidates (e.g. strings)
            and optionally the query string and returns a list of
            transformed/formatted strings.  It's called with
            (funcall tranform candidates query).
            This is especially useful for async sources
            where the process returns a list of candiate strings,
            in which case TRANSFORM is applied to all candiates using `mapcar'.
            See `consult-omni--grep-transform' for an example.

  FILTER is a function that takes a list of candidates (e.g. strings)
         and optionally the query string and returns a list of filtered
         strings.  It's called with `(funcall filter candidates query)`.
         This is especially useful for async sources
         where the process returns a list of candiate strings,
         in which case FILTER is applied to all candidates using `seq-filter'.
         See `consult-omni--locate-filter' for an example.

  MIN-INPUT is a the minimum required number of characters in user's input
            before the input is sent to the source to fetch results/items

  VALID-INPUT is a function that checks if the user's input is valid for
              the source.  It is called with one argument, the user's input
              string, and should return the input (with possible
              transformations) when the inputn is valid and ='nil when
              the input is not valid.

  ON-SETUP is a function called when setting up the minibuffer.
           This is used inside an state funciton by `consult--read.
           See and its `consult--read' and state functions for more info.

  ON-PREVIEW is used as a function to call on the candidate, when a
             preview is requested.  It takes one required argument, the
             candidate.  For an example, see
             `consult-omni-default-preview-function'.

  ON-RETURN is used as a function to call on the candidate, when the
            candidate is selected.  This is passed to consult built-in
            state function machinery.  Note that in consult-omni's commands
            the output of this function will be returned, and ON-CALLBACK
            is used to do further actions on this returned value.  This
            allows to separate the returned value from the commands and
            actions that run on the selected candidates.  Therefore, for
            most use cases, ON-RETURN can just be `#'identity' to get the
            candidate back as it is.  But, if some transformation is
            needed, ON-RETURN can be used to transform the selected
            candidate.

  ON-EXIT is a function called when exiting the minibuffer.
          This is used inside an state funciton by `consult--read.
          See `consult--read' and its state functions for more info.

  STATE is a function that takes no argument and returns a function for
        consult--read STATE argument.  For an example see
        `consult-omni--dynamic-state-function' that builds state function
        based on ON-PREVIEW and ON-RETURN.  If STATE is non-nil, instead of
        using ON-PREVIEW and ON-RETURN to make a state function, STATE will
        be directly used in consult--read.

  ON-CALLBACK is a function that is called with one required input
              argument, the selected candidate.
              For example, see `consult-omni--default-callback'
              that opens the url of the candidate in the default browser.
              Other examples can be found in the wiki pages of the repo or
              in Lisp files under “source” directory.

  ON-NEW is similiar to ON-CALLBACK but for new non-pre-existing
         candidates, in other words the minibuffer content itself.  This is
         useful for example in autosuggestion commands, to get the query
         itself rather than a suggestion.

  REQUIRE-MATCH is a boolean.  When non-nil non-matching candidates (e.g.
                the minibuffer content itself) can be selected as a
                candidate.

  INTERACTIVE can be a symbol of the list:
         - If ='dynamic, only *dynamic* interactive commands are created
           in this macro.
         - If ='static, only *static* interactive commands are created
           in this macro.
         - Otherwise, *Both* dynamic and static
           commands are created.

  LOOKUP is passed to `consult--read'.
  GROUP is passed to `consult--read'.
  ANNOTATE is passed to `consult--read'.
  NARROW-CHAR is passed to `consult--read'.
  CATEGORY is passed to `consult--read'.
  ENABLED is passed to `consult--read'.
  SORT is passed to `consult--read'.
  PREVIEW-KEY is passed to `consult--read'.
    See consult's Documentaion for more details.

  SEARCH-HIST is a history list varibale to keep records of search terms.
  SELECT-HIST is a history list varibale to keep records of selected
              candidates.
  ADD-HIST is a list of items to add to the history list.

  FACE is used to format the candidate.  This is useful for simple
       formating without making use of TRANSFORM or formating candidates
       inside the REQUEST function.

  DOCSTRING is used as docstring for the variable consult-omni--source-%s
            variable that this macro creates for SOURCE-NAME.

(fn SOURCE-NAME &rest ARGS &key TYPE REQUEST TRANSFORM FILTER MIN-INPUT VALID-INPUT ON-SETUP ON-PREVIEW ON-RETURN ON-EXIT STATE ON-CALLBACK ON-NEW REQUIRE-MATCH INTERACTIVE LOOKUP GROUP NARROW-CHAR CATEGORY SEARCH-HIST SELECT-HIST ADD-HIST FACE ANNOTATE ENABLED SORT PREDICATE PREVIEW-KEY DOCSTRING &allow-other-keys)" nil t)
(autoload 'consult-omni--make-fetch-function "consult-omni" "\
Make a function for fetching result based on SOURCE with ARGS.

Description of Arguments:
SOURCE       a source for consult (e.g. a plist that is passed
             to consult--multi).  See `consult-buffer-sources' for
             examples.
SOURCE-NAME  a string name for SOURCE
DOCSTRING    the docstring for the function that is returned.

(fn SOURCE &rest ARGS &key SOURCE-NAME DOCSTRING &allow-other-keys)" nil t)
(autoload 'consult-omni-multi "consult-omni" "\
Interactive “multi-source dynamic search”.

This is an interactive command that fetches results form all the sources
in either SOURCES or in `consult-omni-multi-sources' with dynamic
completion meaning that the search term can be dynamically updated by the
user and the results are fetched as the user types in the miinibuffer.

Description of Arguments:

  INITIAL     a string; the initial search prompt in the minibuffer.
  PROMPT      a string; an optional minibuffer prompt
  SOURCES     a list of strings or symbols;
              - strings can be the name of a source, a key from
                `consult-omni--sources-alist', which can be made with
                the convinient macro `consult-omni-define-source' or by
                using `consult-omni--make-source-from-consult-source'.
              - symbols can be other consult sources
                (see `consult-buffer-sources' for example.)
              If SOURCES is nil, `consult-omni-multi-sources' is used
              instead.
  MIN-INPUT   a number; minimum number of input characters before
              fetching results.
  VALID-INPUT a function; that chekcs if the user's input is valid.  It is
              called with one argument, the user's input string, and
              returns the input (with possible transformations) when
              valid.
  NO-CALLBACK a boolean; If t, only the selected candidate is returned
              without any callback action.

Other Features:

Additional commandline arguments can be passed in the minibuffer
entry similar to `consult-grep' by typing `--` followed by arguments.
These additional arguments are passed to async sources similar to
`consult-grep' syntax.  In addition, other arguments can be passed
to all sources by using key, val pairs (e.g. “:group domain”)

For example the user can enter:
  “#consult-omni -- :g domain”
This will run a search on all the sources for
the term “consult-omni” and then groups the results by the “domain
of the URL” of the results.

Built-in arguments include:
  - :g, or :group for grouping (see `consult-omni-group-by' and
    `consult-omni--override-group-by' for more info.)
  - :n, or :count is passed as the value for COUNT to any source in
    `consult-omni-multi-sources'.
  - :p, or :page is passed as the value for PAGE to any source in
    `consult-omni-multi-sources'.

Custom arguments can be passed by using “:ARG value”.
For example, if the user types the following in the minibuffer:
  “#how to do web search in emacs? -- :model gpt-4”
The term “how to do web search in emacs?” is passed as the search
term and the “gpt-4” as a keyword argument for :model to every
source in `consult-omni-multi-sources'.  If any request function of
the sources takes a keyword argument for :model, “gpt-4” is
used then.

Once the results are fetched, narrowing down can be done by
using `consult-async-split-style' syntax (e.g. “#” for “perl” style)
after the serach term, similar to `consult-grep'.
For example:
  “#consult-omni#github.com”
uses “consult-omni” as the search term, and then narrows the choices to
results that have “github.com” in them.

For more examples, refer to the official documentation of the repo here:
URL `https://github.com/armindarvish/consult-omni'.

For more details on consult--async functionalities, you can also
see `consult-grep' and the official manual of consult, here:
URL `https://github.com/minad/consult'.

(fn &optional INITIAL PROMPT SOURCES NO-CALLBACK MIN-INPUT VALID-INPUT &rest ARGS)" t)
(autoload 'consult-omni-multi-static "consult-omni" "\
Interactive “static” multi-source search.

This commands asks user for an input (a.k.a. a search term) and fetches
results from all the sources in either SOURCES or in
`consult-omni-multi-sources' and present the result candidates in
minibuffer completion for user to select.

Description of Arguments:

  INPUT       a string; the initial search term.  If non-nil the user
              is queried for one with either
              `consult-omni-default-autosuggest-command' or
              `consult-omni--read-search-string'
  PROMPT      a string; an optional minibuffer prompt
  SOURCES     a list of strings or symbols:
                - strings can be name of a source, a key from
                  `consult-omni--sources-alist', which can be made with the
                  convinient macro `consult-omni-define-source' or by using
                  `consult-omni--make-source-from-consult-source'.
                - symbols can be other consult sources
                  (see `consult-buffer-sources' for example.)
              If SOURCES is nil, `consult-omni-multi-sources' is used
              instead.
  NO-CALLBACK a boolean; If t, only the selected candidate is returned
              without any callback action.

(fn &optional INPUT PROMPT SOURCES NO-CALLBACK &rest ARGS)" t)
(autoload 'consult-omni "consult-omni" "\
Convinient wrapper function for favorite interactive command.

Calls the function in `consult-omni-default-interactive-command' with
ARGS.

(fn &rest ARGS)" t)
(register-definition-prefixes "consult-omni" '("consult-omni-"))


;;; Generated autoloads from consult-omni-embark.el

(register-definition-prefixes "consult-omni-embark" '("consult-omni-"))

;;; End of scraped data

(provide 'consult-omni-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; consult-omni-autoloads.el ends here
